#include <vector>
#include <queue>
using namespace std;

vector< vector<int> > check;
vector< vector<int> > map;
queue< pair<int, int> > Q;
int dx[4] = { 0, 0, 1, -1 };
int dy[4] = { 1, -1, 0, 0 };
int M, N;

int bfs(int x, int y) {
	int each_area_cnt = 0;
	check[y][x] = 1;
	Q.push(make_pair(y, x));

	while (!Q.empty()) {
		int yy = Q.front().first;
		int xx = Q.front().second;
		each_area_cnt += 1;
		Q.pop();

		for (int i = 0; i < 4; i++) {
			if (xx + dx[i] >= 0 && xx + dx[i] < N && yy + dy[i] >= 0 && yy + dy[i] < M) {
				if (map[yy + dy[i]][xx + dx[i]] == map[y][x] && check[yy + dy[i]][xx + dx[i]] == 0) {
					check[yy + dy[i]][xx + dx[i]] = 1;
					Q.push(make_pair(yy + dy[i], xx + dx[i]));
				}
			}
		}
	}
	return each_area_cnt;
}


// 전역 변수를 정의할 경우 함수 내에 초기화 코드를 꼭 작성해주세요.
vector<int> solution(int m, int n, vector<vector<int>> picture) {
	int number_of_area = 0;
	int max_size_of_one_area = 0;

	check = vector< vector<int> >(m, vector<int>(n, 0));
	map = picture;
	M = m, N = n;
	int temp;

	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			if (check[i][j] == 0 && map[i][j] != 0) {
				number_of_area += 1;
				temp = bfs(j, i);
				max_size_of_one_area = (max_size_of_one_area > temp ? max_size_of_one_area : temp);
			}
		}
	}
	vector<int> answer(2);
	answer[0] = number_of_area;
	answer[1] = max_size_of_one_area;
	return answer;
}
