#include <bits/stdc++.h>
using namespace std;


int solution(int m, int n, vector<string> board) {
    int answer = 0;
    vector< vector<int> > check(m, vector<int>(n, 0));
    int i, j;
    
    while(true){
        int escape_flag = 0;
        
        // 4*4 블록되는 부분 찾고 answer += 4
        for(i = 0;i<m-1; i++){
            for(j = 0; j< n-1; j++){
                if(board[i][j] == ' ') continue;
                if(board[i][j] == board[i][j+1] && board[i][j] == board[i+1][j] && board[i][j] == board[i+1][j+1]){
                    escape_flag = 1;
                    answer += 4;
                    check[i][j] += 1;
                    check[i][j+1] +=1;
                    check[i+1][j] += 1;
                    check[i+1][j+1] += 1;
                }
            }
        }
        
        // check 배열에 1이 하나도 없으면 이제 더이상 삭제될 블록 없다 -> while문 탈출
        if(escape_flag == 0) break;
        

        // 4*4 블록에서 중복되는 부분 처리
        // 중복되는 개수만큼 answer에서 빼준다.
        for(i = 0;i < m; i++){
            for(j = 0; j < n; j++){
                if(check[i][j] >= 1) {
                    answer = answer - (check[i][j] - 1);
                    board[i][j] = ' ';
                }
                check[i][j] = 0;   
            }
        }

        // 위에 있는 블록들이 내려온다.
        // 앞에서 제거된 블록들은 빈칸 처리됨
        for(i = m-1;i>0; i--){
            for(j = n-1; j>=0; j--){
                // 빈칸이면 위에서 가장 가까운 블록을 끌고 내려옴
                // 내려온 블록의 원래 위치는 빈칸 처리
                if(board[i][j] == ' '){
                    for(int k = i-1; k>=0; k--){
                        if(board[k][j] != ' '){
                            board[i][j] = board[k][j];
                            board[k][j] = ' ';
                            break;
                        }
                    }
                }
            }
        }
    }
    
    return answer;
}
